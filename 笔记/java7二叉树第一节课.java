二叉树:非线性的数据结构

树的基础概念:
节点的度:一个节点包含的子树的个数.
叶子节点:度为0的节点

节点高度:节点到叶子节点的最长路径
节点深度:根节点到节点的路径
树的高度:根节点的高度
节点的层数:深度+1

树的特性:
1.子树不相交
2.除了根节点外，每个节点有且只有一个父节点
3.节点个数N 边个数 = N - 1

N叉树:树中度最大的个数即为N

二叉树:最多只有两个子树
满二叉树:一种特殊的完全二叉树
一个二叉树每一层的节点数都达到最大值。
每一层的节点个数:2^(n-1) n为层数
总节点个数:2^n - 1
树的高度:已知节点个数为N,求树的高度h = log2 (N+1)

完全二叉树:
除了最后一层节点个数可以不满外，所有层的节点个数都达到最大值。
最后一层节点靠左排列


树的存储:

数组:顺序存储,适合存储完全二叉树，否则会有空间浪费
堆

链表:链式存储
二叉链
class Node {
	Object data;
	Node left;
	Node right;
}

二叉树具有天然的递归特性

树的应用:
OS中的文件夹
公司中的职位分布
图书馆书的分类

树结构的优势:方便查找、删除

二叉搜索树:用到最多的二叉树之一
特点:
1.二分搜索树每个节点的值大于左子树所有节点的值，小于其右子树所有节点的值
2.也是二叉树
3.元素具有可比较性
Comparable:内部比较 compareTo
Comparator:外部比较


堆:完全二叉树 顺序存储
优先级队列

平衡二叉树:AVL 红黑树

二叉树遍历:
按照相应的规则将二叉树中每个节点访问一次
所谓的序指的是每个子树根节点的访问顺序

前中后序遍历:树的深度优先遍历

前序
先访问一个节点的根节点
再访问左子树
最后访问右子树


中序:二叉搜索树排序后的结果
先访问左子树
在访问根节点
最后右子树

后序
先左树
再右树
最后根节点


