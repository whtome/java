面向对象(OO)-类与对象
最大的特征:可以进行现实生活的抽象
1.面向对象三大特征(封装、继承、多态)
I.封装(保护性):
将客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或对象操作，对不可信的进行隐藏。内部操作对外部而言不可见。

II.继承(可重用):
可以使用现有类的所有功能，并且在无须重新编写原有类的基础上进行功能上的扩展。

III.多态:
一个类实例的相同方法在不同情形下有不同的表现形式。

1.2名词拓展
OOA:面向对象分析
OOD:面向对象设计
OOP:面向对象编程

2.类与对象的定义与使用

2.1基本概念

类:描述的是共性的概念

对象:类中的具体的一个成员(一个具体的、可以使用的事物)

类与对象关系:
首先产生类(生产对象的蓝图),而后才可以产生对象。
对象所具备的所有行为与属性，一定在类中进行了完整定义。

对象引用(对象的名称)

2.2 类与对象的定义与使用

定义类语法如下

class 类名称 {
	属性类型 属性名称1;
	属性类型 属性名称2;
	........
	构造方法1(){}
	构造方法2(){}
	.......
	方法1(){}
	方法2(){}
	...	
}

对象的产生语法:

类名称 对象引用 = new 类名称();

2.3对象内存分析

栈内存:存放的是局部变量(包含各种基本数据类型和对象引用)

堆内存:保存的是真正的数据(类和数组的数据)

垃圾空间:没有任何栈内存指向的堆内存空间

3.1 private实现封装处理

当属性或方法被private关键字修饰后，该属性或方法无法在类外部调用，只能在本类中使用。

被private封装的属性或方法称为私有属性&私有方法

要访问或者修改私有属性，必须提供以下两种方法
setter方法:主要用于属性值的设置与修改
getter方法:主要用于取得属性值

3.2类设计原则
I.编写类时，类中所有属性必须使用private封装
II.属性若要被外部访问，必须提供setter与getter方法

3.3 构造方法
定义:使用关键字new实例化新对象时调用的方法

特点:
I.构造方法名称与类名称相同
II.一个类中至少存在一个构造方法，如果没有自定义构造方法，则系统默认产生一个无参构造，若自定义了构造方法，系统默认的无参构造将不再产生。
III.构造方法没有返回值类型声明


不加static关键字的方法称为普通方法，必须通过对象调用。

构造方法用于类中属性的初始化。

构造方法重载:参数的个数不同
初始化属性的个数不同
